// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders 1`] = `
<Form
  inline={false}
  onSubmit={[Function]}
>
  <FormGroup
    controlId="requestedTokenName"
  >
    <FormLabel
      column={false}
      srOnly={false}
    >
      Token Name
    </FormLabel>
    <Unknown
      control={
        Object {
          "defaultValuesRef": Object {
            "current": Object {},
          },
          "fieldArrayDefaultValuesRef": Object {
            "current": Object {},
          },
          "fieldsRef": Object {
            "current": Object {},
          },
          "formStateRef": Object {
            "current": Object {
              "dirtyFields": Object {},
              "errors": Object {},
              "isDirty": false,
              "isSubmitSuccessful": false,
              "isSubmitted": false,
              "isSubmitting": false,
              "isValid": false,
              "isValidating": false,
              "submitCount": 0,
              "touchedFields": Object {},
            },
          },
          "getIsDirty": [Function],
          "inFieldArrayActionRef": Object {
            "current": false,
          },
          "namesRef": Object {
            "current": Object {
              "array": Set {},
              "mount": Set {},
              "unMount": Set {},
              "watch": Set {},
              "watchAll": false,
            },
          },
          "readFormStateRef": Object {
            "current": Object {
              "dirtyFields": false,
              "errors": "all",
              "isDirty": false,
              "isValid": false,
              "isValidating": false,
              "touchedFields": false,
            },
          },
          "register": [Function],
          "shouldUnmount": undefined,
          "subjectsRef": Object {
            "current": Object {
              "array": ke {
                "observers": Array [],
              },
              "control": ke {
                "observers": Array [],
              },
              "state": ke {
                "observers": Array [],
              },
              "watch": ke {
                "observers": Array [],
              },
            },
          },
          "unregister": [Function],
          "updateIsValid": [Function],
          "watchInternal": [Function],
        }
      }
      defaultValue=""
      name="requestedTokenName"
      render={[Function]}
      rules={
        Object {
          "maxLength": Object {
            "message": "The token name must contain at most 40 characters",
            "value": 40,
          },
          "minLength": Object {
            "message": "The token name must contain at least 3 characters",
            "value": 3,
          },
          "required": "The token name is required",
        }
      }
    />
    <Feedback
      data-testid="tokenNameMessage"
      type="invalid"
    />
  </FormGroup>
  <FormGroup
    controlId="bars"
  >
    <FormLabel
      column={false}
      srOnly={false}
    >
      Number of Gold Bars
    </FormLabel>
    <Unknown
      control={
        Object {
          "defaultValuesRef": Object {
            "current": Object {},
          },
          "fieldArrayDefaultValuesRef": Object {
            "current": Object {},
          },
          "fieldsRef": Object {
            "current": Object {},
          },
          "formStateRef": Object {
            "current": Object {
              "dirtyFields": Object {},
              "errors": Object {},
              "isDirty": false,
              "isSubmitSuccessful": false,
              "isSubmitted": false,
              "isSubmitting": false,
              "isValid": false,
              "isValidating": false,
              "submitCount": 0,
              "touchedFields": Object {},
            },
          },
          "getIsDirty": [Function],
          "inFieldArrayActionRef": Object {
            "current": false,
          },
          "namesRef": Object {
            "current": Object {
              "array": Set {},
              "mount": Set {},
              "unMount": Set {},
              "watch": Set {},
              "watchAll": false,
            },
          },
          "readFormStateRef": Object {
            "current": Object {
              "dirtyFields": false,
              "errors": "all",
              "isDirty": false,
              "isValid": false,
              "isValidating": false,
              "touchedFields": false,
            },
          },
          "register": [Function],
          "shouldUnmount": undefined,
          "subjectsRef": Object {
            "current": Object {
              "array": ke {
                "observers": Array [],
              },
              "control": ke {
                "observers": Array [],
              },
              "state": ke {
                "observers": Array [],
              },
              "watch": ke {
                "observers": Array [],
              },
            },
          },
          "unregister": [Function],
          "updateIsValid": [Function],
          "watchInternal": [Function],
        }
      }
      name="bars"
      render={[Function]}
      rules={
        Object {
          "max": Object {
            "message": "The # of bars must not be greater than 100",
            "value": 100,
          },
          "min": Object {
            "message": "The # of bars must be greater or equal to 1",
            "value": 1,
          },
          "required": "The # of bars is required",
        }
      }
    />
    <Feedback
      data-testid="barsMessage"
      type="invalid"
    />
  </FormGroup>
  <ButtonGroup
    role="group"
    toggle={false}
    vertical={false}
  >
    <Button
      active={false}
      data-testid="btnSubmit"
      disabled={false}
      type="submit"
      variant="primary"
    >
      Submit
    </Button>
    <Button
      active={false}
      data-testid="btnCancel"
      disabled={false}
      onClick={[Function]}
      variant="secondary"
    >
      Cancel
    </Button>
  </ButtonGroup>
</Form>
`;
