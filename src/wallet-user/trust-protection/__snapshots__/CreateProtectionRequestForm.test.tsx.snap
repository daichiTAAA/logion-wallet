// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders 1`] = `
<ContentPane
  addresses={
    Object {
      "addresses": Array [
        Object {
          "address": "5H4MvAsobfZ6bBCDyj5dsrWYLrA8HrRzaqa9p61UXtxMhSCY",
          "isLegalOfficer": false,
          "name": "name",
        },
      ],
      "currentAddress": Object {
        "address": "5H4MvAsobfZ6bBCDyj5dsrWYLrA8HrRzaqa9p61UXtxMhSCY",
        "isLegalOfficer": false,
        "name": "name",
      },
    }
  }
  colors={
    Object {
      "accounts": Object {
        "background": "#0c163d",
        "foreground": "#ffffff",
        "hintColor": "#ffffff99",
        "iconBackground": "#3b6cf4",
        "legalOfficerIcon": Object {
          "category": "legal-officer",
          "id": "account-shield",
        },
      },
      "bottomMenuItems": Object {
        "iconGradient": Object {
          "from": "#7a90cb",
          "to": "#3b6cf4",
        },
      },
      "buttons": Object {
        "secondaryBackgroundColor": "#0c163d",
      },
      "dashboard": Object {
        "background": "#0c163d",
        "foreground": "#ffffff",
      },
      "frame": Object {
        "background": "#152665",
        "foreground": "#ffffff",
        "link": "#ffffff",
      },
      "select": Object {
        "background": "#ffffff33",
        "foreground": "#ffffff",
        "menuBackgroundColor": "#152665",
        "selectedOptionBackgroundColor": "#ffffff33",
      },
      "shadowColor": "#3b6cf433",
      "sidebar": Object {
        "activeItemBackground": "#ffffff33",
        "background": "#152665",
        "foreground": "#ffffff",
      },
      "topMenuItems": Object {
        "iconGradient": Object {
          "from": "#3b6cf4",
          "to": "#6050dc",
        },
      },
      "type": "dark",
    }
  }
  mainTitle="My Logion Trust Protection"
  primaryAreaChildren={
    <Frame
      className="CreateProtectionRequestFormLegalOfficers"
      colors={
        Object {
          "accounts": Object {
            "background": "#0c163d",
            "foreground": "#ffffff",
            "hintColor": "#ffffff99",
            "iconBackground": "#3b6cf4",
            "legalOfficerIcon": Object {
              "category": "legal-officer",
              "id": "account-shield",
            },
          },
          "bottomMenuItems": Object {
            "iconGradient": Object {
              "from": "#7a90cb",
              "to": "#3b6cf4",
            },
          },
          "buttons": Object {
            "secondaryBackgroundColor": "#0c163d",
          },
          "dashboard": Object {
            "background": "#0c163d",
            "foreground": "#ffffff",
          },
          "frame": Object {
            "background": "#152665",
            "foreground": "#ffffff",
            "link": "#ffffff",
          },
          "select": Object {
            "background": "#ffffff33",
            "foreground": "#ffffff",
            "menuBackgroundColor": "#152665",
            "selectedOptionBackgroundColor": "#ffffff33",
          },
          "shadowColor": "#3b6cf433",
          "sidebar": Object {
            "activeItemBackground": "#ffffff33",
            "background": "#152665",
            "foreground": "#ffffff",
          },
          "topMenuItems": Object {
            "iconGradient": Object {
              "from": "#3b6cf4",
              "to": "#6050dc",
            },
          },
          "type": "dark",
        }
      }
    >
      <h3>
        Choose your Legal Officers
      </h3>
      <LegalOfficers
        colorTheme={
          Object {
            "accounts": Object {
              "background": "#0c163d",
              "foreground": "#ffffff",
              "hintColor": "#ffffff99",
              "iconBackground": "#3b6cf4",
              "legalOfficerIcon": Object {
                "category": "legal-officer",
                "id": "account-shield",
              },
            },
            "bottomMenuItems": Object {
              "iconGradient": Object {
                "from": "#7a90cb",
                "to": "#3b6cf4",
              },
            },
            "buttons": Object {
              "secondaryBackgroundColor": "#0c163d",
            },
            "dashboard": Object {
              "background": "#0c163d",
              "foreground": "#ffffff",
            },
            "frame": Object {
              "background": "#152665",
              "foreground": "#ffffff",
              "link": "#ffffff",
            },
            "select": Object {
              "background": "#ffffff33",
              "foreground": "#ffffff",
              "menuBackgroundColor": "#152665",
              "selectedOptionBackgroundColor": "#ffffff33",
            },
            "shadowColor": "#3b6cf433",
            "sidebar": Object {
              "activeItemBackground": "#ffffff33",
              "background": "#152665",
              "foreground": "#ffffff",
            },
            "topMenuItems": Object {
              "iconGradient": Object {
                "from": "#3b6cf4",
                "to": "#6050dc",
              },
            },
            "type": "dark",
          }
        }
        legalOfficer1={null}
        legalOfficer2={null}
        legalOfficers={
          Array [
            Object {
              "address": "5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY",
              "details": "Modero Bruxelles
Central administration 
Nijverheidslaan 1
B - 1853 Grimbergen (Strombeek-Bever)
Belgium",
              "name": "Patrick Gielen",
            },
            Object {
              "address": "5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty",
              "details": "SELARL ADRASTEE
Gare des Brotteaux
14, place Jules Ferry
69006 LYON
France",
              "name": "Guillaume Grain",
            },
            Object {
              "address": "1234567890-abcd-5",
              "details": "Place de le République Française, 10",
              "name": "Alain Barland",
            },
            Object {
              "address": "1234567890-abcd-6",
              "details": "Place de le République Française, 10",
              "name": "Ronald Vanswijgenhoven",
            },
            Object {
              "address": "1234567890-abcd-7",
              "details": "Place de le République Française, 10",
              "name": "Thibaut Barnier",
            },
            Object {
              "address": "1234567890-abcd-8",
              "details": "Place de le République Française, 10",
              "name": "Jona Van Leeuwen",
            },
            Object {
              "address": "1234567890-abcd-9",
              "details": "Place de le République Française, 10",
              "name": "Carlos Calvo",
            },
            Object {
              "address": "1234567890-abcd-10",
              "details": "Place de le République Française, 10",
              "name": "Ilias Tsipos",
            },
            Object {
              "address": "1234567890-abcd-11",
              "details": "Place de le République Française, 10",
              "name": "Pedroso Leal",
            },
            Object {
              "address": "1234567890-abcd-12",
              "details": "Place de le République Française, 10",
              "name": "Marc Schmitz",
            },
          ]
        }
        mode="choose"
        setLegalOfficer1={[Function]}
        setLegalOfficer2={[Function]}
      />
    </Frame>
  }
  primaryPaneWidth={6}
  secondaryAreaChildren={
    <Frame
      className="CreateProtectionRequestFormOther"
      colors={
        Object {
          "accounts": Object {
            "background": "#0c163d",
            "foreground": "#ffffff",
            "hintColor": "#ffffff99",
            "iconBackground": "#3b6cf4",
            "legalOfficerIcon": Object {
              "category": "legal-officer",
              "id": "account-shield",
            },
          },
          "bottomMenuItems": Object {
            "iconGradient": Object {
              "from": "#7a90cb",
              "to": "#3b6cf4",
            },
          },
          "buttons": Object {
            "secondaryBackgroundColor": "#0c163d",
          },
          "dashboard": Object {
            "background": "#0c163d",
            "foreground": "#ffffff",
          },
          "frame": Object {
            "background": "#152665",
            "foreground": "#ffffff",
            "link": "#ffffff",
          },
          "select": Object {
            "background": "#ffffff33",
            "foreground": "#ffffff",
            "menuBackgroundColor": "#152665",
            "selectedOptionBackgroundColor": "#ffffff33",
          },
          "shadowColor": "#3b6cf433",
          "sidebar": Object {
            "activeItemBackground": "#ffffff33",
            "background": "#152665",
            "foreground": "#ffffff",
          },
          "topMenuItems": Object {
            "iconGradient": Object {
              "from": "#3b6cf4",
              "to": "#6050dc",
            },
          },
          "type": "dark",
        }
      }
      disabled={true}
    >
      <h3>
        Fill in your personal information
      </h3>
      <Alert
        variant="info"
      >
        This initial personal information sharing will start KYC process and will also be used in the context of a potential future recovery process.
      </Alert>
      <Form
        inline={false}
        onSubmit={[Function]}
      >
        <Row
          noGutters={false}
        >
          <Col
            md={6}
          >
            <FormGroup
              controlId="firstName"
            >
              <FormLabel
                column={false}
                srOnly={false}
              >
                First Name
              </FormLabel>
              <Unknown
                control={
                  Object {
                    "defaultValuesRef": Object {
                      "current": Object {},
                    },
                    "fieldArrayDefaultValuesRef": Object {
                      "current": Object {},
                    },
                    "fieldsRef": Object {
                      "current": Object {},
                    },
                    "formStateRef": Object {
                      "current": Object {
                        "dirtyFields": Object {},
                        "errors": Object {},
                        "isDirty": false,
                        "isSubmitSuccessful": false,
                        "isSubmitted": false,
                        "isSubmitting": false,
                        "isValid": false,
                        "isValidating": false,
                        "submitCount": 0,
                        "touchedFields": Object {},
                      },
                    },
                    "getIsDirty": [Function],
                    "inFieldArrayActionRef": Object {
                      "current": false,
                    },
                    "namesRef": Object {
                      "current": Object {
                        "array": Set {},
                        "mount": Set {},
                        "unMount": Set {},
                        "watch": Set {},
                        "watchAll": false,
                      },
                    },
                    "readFormStateRef": Object {
                      "current": Object {
                        "dirtyFields": false,
                        "errors": "all",
                        "isDirty": false,
                        "isValid": false,
                        "isValidating": false,
                        "touchedFields": false,
                      },
                    },
                    "register": [Function],
                    "shouldUnmount": undefined,
                    "subjectsRef": Object {
                      "current": Object {
                        "array": ke {
                          "observers": Array [],
                        },
                        "control": ke {
                          "observers": Array [],
                        },
                        "state": ke {
                          "observers": Array [],
                        },
                        "watch": ke {
                          "observers": Array [],
                        },
                      },
                    },
                    "unregister": [Function],
                    "updateIsValid": [Function],
                    "watchInternal": [Function],
                  }
                }
                defaultValue=""
                name="firstName"
                render={[Function]}
                rules={
                  Object {
                    "required": "The first name is required",
                  }
                }
              />
              <Feedback
                data-testid="firstNameMessage"
                type="invalid"
              />
            </FormGroup>
          </Col>
          <Col
            md={6}
          >
            <FormGroup
              controlId="lastName"
            >
              <FormLabel
                column={false}
                srOnly={false}
              >
                Last Name
              </FormLabel>
              <Unknown
                control={
                  Object {
                    "defaultValuesRef": Object {
                      "current": Object {},
                    },
                    "fieldArrayDefaultValuesRef": Object {
                      "current": Object {},
                    },
                    "fieldsRef": Object {
                      "current": Object {},
                    },
                    "formStateRef": Object {
                      "current": Object {
                        "dirtyFields": Object {},
                        "errors": Object {},
                        "isDirty": false,
                        "isSubmitSuccessful": false,
                        "isSubmitted": false,
                        "isSubmitting": false,
                        "isValid": false,
                        "isValidating": false,
                        "submitCount": 0,
                        "touchedFields": Object {},
                      },
                    },
                    "getIsDirty": [Function],
                    "inFieldArrayActionRef": Object {
                      "current": false,
                    },
                    "namesRef": Object {
                      "current": Object {
                        "array": Set {},
                        "mount": Set {},
                        "unMount": Set {},
                        "watch": Set {},
                        "watchAll": false,
                      },
                    },
                    "readFormStateRef": Object {
                      "current": Object {
                        "dirtyFields": false,
                        "errors": "all",
                        "isDirty": false,
                        "isValid": false,
                        "isValidating": false,
                        "touchedFields": false,
                      },
                    },
                    "register": [Function],
                    "shouldUnmount": undefined,
                    "subjectsRef": Object {
                      "current": Object {
                        "array": ke {
                          "observers": Array [],
                        },
                        "control": ke {
                          "observers": Array [],
                        },
                        "state": ke {
                          "observers": Array [],
                        },
                        "watch": ke {
                          "observers": Array [],
                        },
                      },
                    },
                    "unregister": [Function],
                    "updateIsValid": [Function],
                    "watchInternal": [Function],
                  }
                }
                defaultValue=""
                name="lastName"
                render={[Function]}
                rules={
                  Object {
                    "required": "The last name is required",
                  }
                }
              />
              <Feedback
                data-testid="lastNameMessage"
                type="invalid"
              />
            </FormGroup>
          </Col>
        </Row>
        <Row
          noGutters={false}
        >
          <Col
            md={6}
          >
            <FormGroup
              controlId="email"
            >
              <FormLabel
                column={false}
                srOnly={false}
              >
                Email
              </FormLabel>
              <Unknown
                control={
                  Object {
                    "defaultValuesRef": Object {
                      "current": Object {},
                    },
                    "fieldArrayDefaultValuesRef": Object {
                      "current": Object {},
                    },
                    "fieldsRef": Object {
                      "current": Object {},
                    },
                    "formStateRef": Object {
                      "current": Object {
                        "dirtyFields": Object {},
                        "errors": Object {},
                        "isDirty": false,
                        "isSubmitSuccessful": false,
                        "isSubmitted": false,
                        "isSubmitting": false,
                        "isValid": false,
                        "isValidating": false,
                        "submitCount": 0,
                        "touchedFields": Object {},
                      },
                    },
                    "getIsDirty": [Function],
                    "inFieldArrayActionRef": Object {
                      "current": false,
                    },
                    "namesRef": Object {
                      "current": Object {
                        "array": Set {},
                        "mount": Set {},
                        "unMount": Set {},
                        "watch": Set {},
                        "watchAll": false,
                      },
                    },
                    "readFormStateRef": Object {
                      "current": Object {
                        "dirtyFields": false,
                        "errors": "all",
                        "isDirty": false,
                        "isValid": false,
                        "isValidating": false,
                        "touchedFields": false,
                      },
                    },
                    "register": [Function],
                    "shouldUnmount": undefined,
                    "subjectsRef": Object {
                      "current": Object {
                        "array": ke {
                          "observers": Array [],
                        },
                        "control": ke {
                          "observers": Array [],
                        },
                        "state": ke {
                          "observers": Array [],
                        },
                        "watch": ke {
                          "observers": Array [],
                        },
                      },
                    },
                    "unregister": [Function],
                    "updateIsValid": [Function],
                    "watchInternal": [Function],
                  }
                }
                defaultValue=""
                name="email"
                render={[Function]}
                rules={
                  Object {
                    "required": "The email is required",
                  }
                }
              />
              <Feedback
                data-testid="emailMessage"
                type="invalid"
              />
            </FormGroup>
          </Col>
          <Col
            md={6}
          >
            <FormGroup
              controlId="phoneNumber"
            >
              <FormLabel
                column={false}
                srOnly={false}
              >
                Phone Number
              </FormLabel>
              <Unknown
                control={
                  Object {
                    "defaultValuesRef": Object {
                      "current": Object {},
                    },
                    "fieldArrayDefaultValuesRef": Object {
                      "current": Object {},
                    },
                    "fieldsRef": Object {
                      "current": Object {},
                    },
                    "formStateRef": Object {
                      "current": Object {
                        "dirtyFields": Object {},
                        "errors": Object {},
                        "isDirty": false,
                        "isSubmitSuccessful": false,
                        "isSubmitted": false,
                        "isSubmitting": false,
                        "isValid": false,
                        "isValidating": false,
                        "submitCount": 0,
                        "touchedFields": Object {},
                      },
                    },
                    "getIsDirty": [Function],
                    "inFieldArrayActionRef": Object {
                      "current": false,
                    },
                    "namesRef": Object {
                      "current": Object {
                        "array": Set {},
                        "mount": Set {},
                        "unMount": Set {},
                        "watch": Set {},
                        "watchAll": false,
                      },
                    },
                    "readFormStateRef": Object {
                      "current": Object {
                        "dirtyFields": false,
                        "errors": "all",
                        "isDirty": false,
                        "isValid": false,
                        "isValidating": false,
                        "touchedFields": false,
                      },
                    },
                    "register": [Function],
                    "shouldUnmount": undefined,
                    "subjectsRef": Object {
                      "current": Object {
                        "array": ke {
                          "observers": Array [],
                        },
                        "control": ke {
                          "observers": Array [],
                        },
                        "state": ke {
                          "observers": Array [],
                        },
                        "watch": ke {
                          "observers": Array [],
                        },
                      },
                    },
                    "unregister": [Function],
                    "updateIsValid": [Function],
                    "watchInternal": [Function],
                  }
                }
                defaultValue=""
                name="phoneNumber"
                render={[Function]}
                rules={
                  Object {
                    "required": "The phone number is required",
                  }
                }
              />
              <Feedback
                data-testid="phoneNumberMessage"
                type="invalid"
              />
            </FormGroup>
          </Col>
        </Row>
        <h3>
          Address
        </h3>
        <FormGroup
          controlId="line1"
        >
          <FormLabel
            column={false}
            srOnly={false}
          >
            Line1
          </FormLabel>
          <Unknown
            control={
              Object {
                "defaultValuesRef": Object {
                  "current": Object {},
                },
                "fieldArrayDefaultValuesRef": Object {
                  "current": Object {},
                },
                "fieldsRef": Object {
                  "current": Object {},
                },
                "formStateRef": Object {
                  "current": Object {
                    "dirtyFields": Object {},
                    "errors": Object {},
                    "isDirty": false,
                    "isSubmitSuccessful": false,
                    "isSubmitted": false,
                    "isSubmitting": false,
                    "isValid": false,
                    "isValidating": false,
                    "submitCount": 0,
                    "touchedFields": Object {},
                  },
                },
                "getIsDirty": [Function],
                "inFieldArrayActionRef": Object {
                  "current": false,
                },
                "namesRef": Object {
                  "current": Object {
                    "array": Set {},
                    "mount": Set {},
                    "unMount": Set {},
                    "watch": Set {},
                    "watchAll": false,
                  },
                },
                "readFormStateRef": Object {
                  "current": Object {
                    "dirtyFields": false,
                    "errors": "all",
                    "isDirty": false,
                    "isValid": false,
                    "isValidating": false,
                    "touchedFields": false,
                  },
                },
                "register": [Function],
                "shouldUnmount": undefined,
                "subjectsRef": Object {
                  "current": Object {
                    "array": ke {
                      "observers": Array [],
                    },
                    "control": ke {
                      "observers": Array [],
                    },
                    "state": ke {
                      "observers": Array [],
                    },
                    "watch": ke {
                      "observers": Array [],
                    },
                  },
                },
                "unregister": [Function],
                "updateIsValid": [Function],
                "watchInternal": [Function],
              }
            }
            defaultValue=""
            name="line1"
            render={[Function]}
            rules={
              Object {
                "required": "The line1 is required",
              }
            }
          />
          <Feedback
            data-testid="line1Message"
            type="invalid"
          />
        </FormGroup>
        <FormGroup
          controlId="line2"
        >
          <FormLabel
            column={false}
            srOnly={false}
          >
            Line2
          </FormLabel>
          <Unknown
            control={
              Object {
                "defaultValuesRef": Object {
                  "current": Object {},
                },
                "fieldArrayDefaultValuesRef": Object {
                  "current": Object {},
                },
                "fieldsRef": Object {
                  "current": Object {},
                },
                "formStateRef": Object {
                  "current": Object {
                    "dirtyFields": Object {},
                    "errors": Object {},
                    "isDirty": false,
                    "isSubmitSuccessful": false,
                    "isSubmitted": false,
                    "isSubmitting": false,
                    "isValid": false,
                    "isValidating": false,
                    "submitCount": 0,
                    "touchedFields": Object {},
                  },
                },
                "getIsDirty": [Function],
                "inFieldArrayActionRef": Object {
                  "current": false,
                },
                "namesRef": Object {
                  "current": Object {
                    "array": Set {},
                    "mount": Set {},
                    "unMount": Set {},
                    "watch": Set {},
                    "watchAll": false,
                  },
                },
                "readFormStateRef": Object {
                  "current": Object {
                    "dirtyFields": false,
                    "errors": "all",
                    "isDirty": false,
                    "isValid": false,
                    "isValidating": false,
                    "touchedFields": false,
                  },
                },
                "register": [Function],
                "shouldUnmount": undefined,
                "subjectsRef": Object {
                  "current": Object {
                    "array": ke {
                      "observers": Array [],
                    },
                    "control": ke {
                      "observers": Array [],
                    },
                    "state": ke {
                      "observers": Array [],
                    },
                    "watch": ke {
                      "observers": Array [],
                    },
                  },
                },
                "unregister": [Function],
                "updateIsValid": [Function],
                "watchInternal": [Function],
              }
            }
            defaultValue=""
            name="line2"
            render={[Function]}
          />
          <Feedback
            data-testid="line2Message"
            type="invalid"
          />
        </FormGroup>
        <Row
          noGutters={false}
        >
          <Col
            md={4}
          >
            <FormGroup
              controlId="postalCode"
            >
              <FormLabel
                column={false}
                srOnly={false}
              >
                Postal Code
              </FormLabel>
              <Unknown
                control={
                  Object {
                    "defaultValuesRef": Object {
                      "current": Object {},
                    },
                    "fieldArrayDefaultValuesRef": Object {
                      "current": Object {},
                    },
                    "fieldsRef": Object {
                      "current": Object {},
                    },
                    "formStateRef": Object {
                      "current": Object {
                        "dirtyFields": Object {},
                        "errors": Object {},
                        "isDirty": false,
                        "isSubmitSuccessful": false,
                        "isSubmitted": false,
                        "isSubmitting": false,
                        "isValid": false,
                        "isValidating": false,
                        "submitCount": 0,
                        "touchedFields": Object {},
                      },
                    },
                    "getIsDirty": [Function],
                    "inFieldArrayActionRef": Object {
                      "current": false,
                    },
                    "namesRef": Object {
                      "current": Object {
                        "array": Set {},
                        "mount": Set {},
                        "unMount": Set {},
                        "watch": Set {},
                        "watchAll": false,
                      },
                    },
                    "readFormStateRef": Object {
                      "current": Object {
                        "dirtyFields": false,
                        "errors": "all",
                        "isDirty": false,
                        "isValid": false,
                        "isValidating": false,
                        "touchedFields": false,
                      },
                    },
                    "register": [Function],
                    "shouldUnmount": undefined,
                    "subjectsRef": Object {
                      "current": Object {
                        "array": ke {
                          "observers": Array [],
                        },
                        "control": ke {
                          "observers": Array [],
                        },
                        "state": ke {
                          "observers": Array [],
                        },
                        "watch": ke {
                          "observers": Array [],
                        },
                      },
                    },
                    "unregister": [Function],
                    "updateIsValid": [Function],
                    "watchInternal": [Function],
                  }
                }
                defaultValue=""
                name="postalCode"
                render={[Function]}
                rules={
                  Object {
                    "required": "The postal code is required",
                  }
                }
              />
              <Feedback
                data-testid="postalCodeMessage"
                type="invalid"
              />
            </FormGroup>
          </Col>
          <Col
            md={8}
          >
            <FormGroup
              controlId="city"
            >
              <FormLabel
                column={false}
                srOnly={false}
              >
                City
              </FormLabel>
              <Unknown
                control={
                  Object {
                    "defaultValuesRef": Object {
                      "current": Object {},
                    },
                    "fieldArrayDefaultValuesRef": Object {
                      "current": Object {},
                    },
                    "fieldsRef": Object {
                      "current": Object {},
                    },
                    "formStateRef": Object {
                      "current": Object {
                        "dirtyFields": Object {},
                        "errors": Object {},
                        "isDirty": false,
                        "isSubmitSuccessful": false,
                        "isSubmitted": false,
                        "isSubmitting": false,
                        "isValid": false,
                        "isValidating": false,
                        "submitCount": 0,
                        "touchedFields": Object {},
                      },
                    },
                    "getIsDirty": [Function],
                    "inFieldArrayActionRef": Object {
                      "current": false,
                    },
                    "namesRef": Object {
                      "current": Object {
                        "array": Set {},
                        "mount": Set {},
                        "unMount": Set {},
                        "watch": Set {},
                        "watchAll": false,
                      },
                    },
                    "readFormStateRef": Object {
                      "current": Object {
                        "dirtyFields": false,
                        "errors": "all",
                        "isDirty": false,
                        "isValid": false,
                        "isValidating": false,
                        "touchedFields": false,
                      },
                    },
                    "register": [Function],
                    "shouldUnmount": undefined,
                    "subjectsRef": Object {
                      "current": Object {
                        "array": ke {
                          "observers": Array [],
                        },
                        "control": ke {
                          "observers": Array [],
                        },
                        "state": ke {
                          "observers": Array [],
                        },
                        "watch": ke {
                          "observers": Array [],
                        },
                      },
                    },
                    "unregister": [Function],
                    "updateIsValid": [Function],
                    "watchInternal": [Function],
                  }
                }
                defaultValue=""
                name="city"
                render={[Function]}
                rules={
                  Object {
                    "required": "The city is required",
                  }
                }
              />
              <Feedback
                data-testid="cityMessage"
                type="invalid"
              />
            </FormGroup>
          </Col>
        </Row>
        <FormGroup
          controlId="country"
        >
          <FormLabel
            column={false}
            srOnly={false}
          >
            Country
          </FormLabel>
          <Unknown
            control={
              Object {
                "defaultValuesRef": Object {
                  "current": Object {},
                },
                "fieldArrayDefaultValuesRef": Object {
                  "current": Object {},
                },
                "fieldsRef": Object {
                  "current": Object {},
                },
                "formStateRef": Object {
                  "current": Object {
                    "dirtyFields": Object {},
                    "errors": Object {},
                    "isDirty": false,
                    "isSubmitSuccessful": false,
                    "isSubmitted": false,
                    "isSubmitting": false,
                    "isValid": false,
                    "isValidating": false,
                    "submitCount": 0,
                    "touchedFields": Object {},
                  },
                },
                "getIsDirty": [Function],
                "inFieldArrayActionRef": Object {
                  "current": false,
                },
                "namesRef": Object {
                  "current": Object {
                    "array": Set {},
                    "mount": Set {},
                    "unMount": Set {},
                    "watch": Set {},
                    "watchAll": false,
                  },
                },
                "readFormStateRef": Object {
                  "current": Object {
                    "dirtyFields": false,
                    "errors": "all",
                    "isDirty": false,
                    "isValid": false,
                    "isValidating": false,
                    "touchedFields": false,
                  },
                },
                "register": [Function],
                "shouldUnmount": undefined,
                "subjectsRef": Object {
                  "current": Object {
                    "array": ke {
                      "observers": Array [],
                    },
                    "control": ke {
                      "observers": Array [],
                    },
                    "state": ke {
                      "observers": Array [],
                    },
                    "watch": ke {
                      "observers": Array [],
                    },
                  },
                },
                "unregister": [Function],
                "updateIsValid": [Function],
                "watchInternal": [Function],
              }
            }
            defaultValue=""
            name="country"
            render={[Function]}
            rules={
              Object {
                "required": "The country is required",
              }
            }
          />
          <Feedback
            data-testid="countryMessage"
            type="invalid"
          />
        </FormGroup>
        <div
          className="agree-submit"
        >
          <FormGroup
            controlId="agree"
          >
            <Unknown
              control={
                Object {
                  "defaultValuesRef": Object {
                    "current": Object {},
                  },
                  "fieldArrayDefaultValuesRef": Object {
                    "current": Object {},
                  },
                  "fieldsRef": Object {
                    "current": Object {},
                  },
                  "formStateRef": Object {
                    "current": Object {
                      "dirtyFields": Object {},
                      "errors": Object {},
                      "isDirty": false,
                      "isSubmitSuccessful": false,
                      "isSubmitted": false,
                      "isSubmitting": false,
                      "isValid": false,
                      "isValidating": false,
                      "submitCount": 0,
                      "touchedFields": Object {},
                    },
                  },
                  "getIsDirty": [Function],
                  "inFieldArrayActionRef": Object {
                    "current": false,
                  },
                  "namesRef": Object {
                    "current": Object {
                      "array": Set {},
                      "mount": Set {},
                      "unMount": Set {},
                      "watch": Set {},
                      "watchAll": false,
                    },
                  },
                  "readFormStateRef": Object {
                    "current": Object {
                      "dirtyFields": false,
                      "errors": "all",
                      "isDirty": false,
                      "isValid": false,
                      "isValidating": false,
                      "touchedFields": false,
                    },
                  },
                  "register": [Function],
                  "shouldUnmount": undefined,
                  "subjectsRef": Object {
                    "current": Object {
                      "array": ke {
                        "observers": Array [],
                      },
                      "control": ke {
                        "observers": Array [],
                      },
                      "state": ke {
                        "observers": Array [],
                      },
                      "watch": ke {
                        "observers": Array [],
                      },
                    },
                  },
                  "unregister": [Function],
                  "updateIsValid": [Function],
                  "watchInternal": [Function],
                }
              }
              defaultValue=""
              name="agree"
              render={[Function]}
              rules={
                Object {
                  "required": "You must agree in order to proceed",
                }
              }
            />
          </FormGroup>
          <Button
            action={
              Object {
                "buttonTestId": "btnSubmit",
                "buttonText": "Next",
                "buttonVariant": "primary",
                "id": "submit",
              }
            }
            backgroundColor="#0c163d"
            type="submit"
          />
        </div>
      </Form>
      <Dialog
        actions={
          Array [
            Object {
              "buttonText": "OK",
              "buttonVariant": "primary",
              "callback": [Function],
              "id": "discard",
            },
          ]
        }
        colors={
          Object {
            "accounts": Object {
              "background": "#0c163d",
              "foreground": "#ffffff",
              "hintColor": "#ffffff99",
              "iconBackground": "#3b6cf4",
              "legalOfficerIcon": Object {
                "category": "legal-officer",
                "id": "account-shield",
              },
            },
            "bottomMenuItems": Object {
              "iconGradient": Object {
                "from": "#7a90cb",
                "to": "#3b6cf4",
              },
            },
            "buttons": Object {
              "secondaryBackgroundColor": "#0c163d",
            },
            "dashboard": Object {
              "background": "#0c163d",
              "foreground": "#ffffff",
            },
            "frame": Object {
              "background": "#152665",
              "foreground": "#ffffff",
              "link": "#ffffff",
            },
            "select": Object {
              "background": "#ffffff33",
              "foreground": "#ffffff",
              "menuBackgroundColor": "#152665",
              "selectedOptionBackgroundColor": "#ffffff33",
            },
            "shadowColor": "#3b6cf433",
            "sidebar": Object {
              "activeItemBackground": "#ffffff33",
              "background": "#152665",
              "foreground": "#ffffff",
            },
            "topMenuItems": Object {
              "iconGradient": Object {
                "from": "#3b6cf4",
                "to": "#6050dc",
              },
            },
            "type": "dark",
          }
        }
        show={false}
        size="lg"
        spaceAbove="25vh"
      >
        <React.Fragment>
          The legal officers have been informed of your request.
        </React.Fragment>
      </Dialog>
    </Frame>
  }
  selectAddress={[MockFunction]}
  subTitle="Activate my Logion Trust Protection"
/>
`;
